#BlueJ class context
comment0.target=ArrayOp
comment0.text=\ \n\ The\ ArrayOp\ class\ implements\ operations\ on\ arrays\ of\ bytes.\ \n\ <p>\n\ Each\ object\ of\ this\ class\ has\ a\ fixed\ instance\ variable\ which\ specifies\ the\ \n\ required\ length\ of\ input\ and\ output\ arrays.\ Error\ message\ will\ be\ \n\ thrown\ if\ the\ length\ of\ input\ is\ incorrect.\n\ <p>\n\ All\ components\ of\ the\ input\ are\ assumed\ to\ be\ nonnegative\ integers.\ \n\ All\ components\ of\ the\ output\ will\ be\ nonnegative\ integers\ too.\ \n\ For\ substract\ and\ binom,\ the\ program\ checks\ whether\ the\ first\ input\ is\ \n\ greater\ or\ equal\ to\ the\ second\ input\ so\ that\ those\ operations\ work\ in\ the\ \n\ naive\ way.\ \n\ \n\ @author\ Yu-jong\ Tzeng\n\ @version\ 4.0\n\ @since\ 2.0\n
comment1.params=n
comment1.target=ArrayOp(int)
comment1.text=\ \n\ Before\ doing\ any\ operations,\ the\ class\ builds\ a\ table\ of\ all\ \n\ binomial\ coefficients\ m\ choose\ k\ for\ all\ 0\ <\=\ k\ <\=\ m\ <\=\ n.\n\ n\ is\ the\ required\ length\ for\ inputs.\ \n\ \n\ @param\ n\ The\ max\ parameter\ allowed\ for\ binomial\ coefficients\ in\ the\ \n\ object.\n\ It\ is\ also\ the\ required\ length\ for\ input\ arrays\ and\ outputs\ arrays\ of\ \n\ all\ methods.\ \n
comment10.params=c\ d
comment10.target=long\ binom(byte[],\ byte[])
comment10.text=\n\ Return\ the\ product\ of\ componentwise\ binomial\ coefficients.\ \n\ Every\ component\ of\ the\ first\ input\ must\ be\ greater\ or\ equal\ to\ the\ \n\ second\ input.\ \n\ @param\ c\ byte[]\n\ @param\ d\ byte[]\n\ @return\ The\ product\ of\ all\ C[ci][di]\ (C[n][k]\ is\ the\ binomial\ \n\ coeffient).\ \ \n
comment2.params=c\ d
comment2.target=boolean\ greater(byte[],\ byte[])
comment2.text=\ \n\ Return\ true\ if\ the\ length\ of\ two\ input\ arrays\ are\ the\ same\ and\ every\ \n\ component\ of\ the\ first\ array\ is\ greater\ or\ equal\ to\ the\ second.\n\ @param\ c\ byte[]\n\ @param\ d\ byte[]\n\ @return\ True\ if\ c.length\ \=\=\ d.length\ and\ c[i]\ >\=\ d[i]\ for\ all\ i.\ \n
comment3.params=c
comment3.target=boolean\ checkLength(byte[])
comment3.text=\n\ Return\ True\ if\ the\ length\ of\ c\ equals\ the\ user\ input\ n.\n
comment4.params=c\ d
comment4.target=byte[]\ add(byte[],\ byte[])
comment4.text=\n\ Return\ the\ componentwise\ sum\ of\ two\ arrays.\n\ @param\ c\ byte[]\n\ @param\ d\ byte[]\n\ @return\ An\ array\ with\ the\ i-th\ element\ being\ c[i]\ +\ d[i].\n
comment5.params=c\ d
comment5.target=byte[]\ substract(byte[],\ byte[])
comment5.text=\n\ Substract\ the\ second\ input\ from\ the\ first\ input.\ Every\ component\ \n\ of\ the\ first\ input\ must\ be\ great\ or\ equal\ to\ the\ second\ input.\ \n\ @param\ c\ byte[]\n\ @param\ d\ byte[]\n\ @return\ The\ componentwise\ difference\ of\ the\ inputs.\ Send\ error\ \n\ message\ if\ the\ length\ of\ c\ or\ d\ is\ not\ equal\ to\ n.\n
comment6.params=c
comment6.target=int\ I(byte[])
comment6.text=\n\ Return\ Ic.\ \n\ @param\ c\ byte[]\n\ @return\ If\ c\ \=\ {c1,\ c2,\ c3,..},\ \ return\ 1*\ c1\ +\ 2*\ c2\ +\ 3\ *\ c3\ +\ ....\n
comment7.params=c\ index
comment7.target=int\ I(byte[],\ int)
comment7.text=\n\ Return\ Ic\ only\ to\ the\ given\ index.\n\ @param\ c\ byte[]\n\ @param\ index\ int\n\ @return\ If\ c\ \=\ {c1,\ c2,\ c3,..},\ \ \n\ return\ 1*\ c1\ +\ 2*\ c2\ +\ 3\ *\ c3\ +\ ....\ +\ index\ *\ cindex.\n
comment8.params=c
comment8.target=long\ J(byte[])
comment8.text=\n\ Return\ I^c.\n\ @param\ c\ byte[]\n\ @return\ If\ c\ \=\ {c1,\ c2,\ c3,..},\ \ \n\ return\ 1^(c1)\ +\ 2^(c2)\ +\ 3^(c3)\ +\ ....\ \n
comment9.params=c
comment9.target=int\ sum(byte[])
comment9.text=\n\ Return\ |c|.\n\ @param\ c\ byte[]\n\ @return\ If\ c\ \=\ {c1,\ c2,\ c3,..},\ return\ the\ sum\ of\ all\ ci.\ \n
numComments=11
