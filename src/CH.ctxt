#BlueJ class context
comment0.target=CH
comment0.text=\n\ <p>\n\ This\ CH\ class\ implements\ the\ recursive\ formula\ of\ Caporaso-Harris\ in\ \n\ the\ article\ "Counting\ plane\ curves\ of\ any\ genus"\ which\ can\ be\ used\ to\ \n\ find\ the\ number\ of\ r-nodal\ curves\ on\ the\ projective\ plane\ of\ any\ degree\n\ d\ and\ r.\ We\ will\ follow\ the\ notation\ in\ Section\ 1.1\ of\ the\ article\ as\ \n\ much\ as\ possible.\n\ <p>\n\ Users\ will\ be\ prompted\ to\ enter\ the\ maximal\ degree\ and\ the\ maximal\ number\ \n\ of\ nodes\ for\ the\ curves\ in\ concern.\ <br>\n\ \n\ The\ program\ will\ print\ the\ computation\ results\ in\ two\ kinds\ of\ txt\ files\:\n\ numbers\ of\ nodal\ curves\ line\ by\ line\ and\ generating\ series.\ \n\ <p>\n\ The\ first\ kind\ of\ files\ contain\ the\ number\ of\ degree\ d\ curves\ on\ the\ \n\ projective\ plane\ with\ r\ nodes\ (strictly\ speaking,\ geometric\ genus\ \n\ (d-1)*(d-2)/2\ -\ r)\n\ which\ satisfy\ tangency\ conditions\ (alpha,\ beta)\ with\ a\ given\ line\ for\ \ \n\ <br>\n\ 1)\ d\ \=\ the\ biggest\ 5\ positive\ integers\ less\ or\ equal\ to\ max\ degree\ \n\ \ \ \ (5\ is\ the\ default\ number\ and\ can\ be\ changed\ by\ modifying\ the\ instance\ \n\ \ \ \ variable\ printLast),\ <br>\ \ \n\ 2)\ all\ nonnegative\ integers\ r\ less\ or\ equal\ to\ max\ number\ of\ nodes,\ <br>\ \ \ \n\ 3)\ all\ valid\ tangency\ conditions\ alpha\ and\ beta\ \n\ \ \ \ (valid\ \:\=\ satisfy\ I(alpha)+I(beta)\ \=\ d).\ \n\ <p>\n\ alpha\ \:\ tangency\ conditions\ at\ assigned\ points.\ \ <br>\n\ beta\ \:\ tangency\ conditions\ at\ unassigned\ points.\ \n\ beta\ \=\ (beta_1,\ beta_2,....).\n\ <p>\ \n\ The\ output\ numbers\ will\ be\ located\ at\ output/CH\ and\ splitted\ according\ to\ \n\ degree\ and\ the\ number\ of\ nodes.\ \n\ <p>\n\ The\ second\ kind\ of\ files\ contain\ the\ generating\ series\ of\ those\ numbers.\ \n\ Define\ the\ generating\ series\ on\ the\ projective\ plane\ P^2\ and\ line\n\ bundle\ O(d)\ to\ be\ <br>\n\ T_{alpha}(P^2,\ O(d),\ line)\ \=\ \\sum_{r,\ beta}\ N(d,\ r,\ alpha,\ beta)\ z^r\ \n\ b^{beta_2}\ c^{beta_3}\ d^{beta_4}....<br>\n\ Define\ the\ degree\ and\ weighted\ degree\ of\ a\ monomial\ to\ be\ <br>\n\ degree(z^r\ b^{beta_2}\ c^{beta_3}\ d^{beta_4}....)\ \=\ r\ +\ b\ +\ c\ +\ d...\ <br>\n\ wdegree(z^r\ b^{beta_2}\ c^{beta_3}\ d^{beta_4}....)\ \=\ 2*b\ +\ 3*c\ +\ 4*d...<br>\n\ All\ terms\ in\ the\ generating\ series\ satisfying\ total\ degree\ <\=\ 5\ and\ \n\ weighted\ degree\ <\=\ 10\ will\ be\ written\ in\ files\ at\ output/genFunCH.\ <br>\n\ The\ number\ of\ terms\ in\ ourput\ can\ be\ modified\ but\ the\ length\ of\ tangency\ \n\ conditions\ must\ <\=25.\ \n\ <p>\n\ Notes\ on\ algorithm\:\ <br>\n\ This\ class\ and\ F0Table\ use\ the\ same\ algorithm.\ \n\ @author\ Yu-jong\ Tzeng\n\ @version\ 3.0\n\ @since\ May\ 19,\ 2020.\n
comment1.params=deg\ maxNode
comment1.target=CH(int,\ int)
comment1.text=\n\ The\ constructor\ of\ the\ class.\n\ @param\ deg\ The\ maximal\ degree\ of\ the\ curves.\ \n\ @param\ maxNode\ The\ maximal\ number\ of\ nodes\ of\ the\ curves.\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\ \n\ Dealing\ with\ user\ input,\ create\ objects\ then\ call\ compute\ method.\ \n\ Paramaters\ deg\ and\ maxNode\ are\ initialzed\ by\ user\ input.\ \n\ @param\ args\ Unused\n
comment3.params=
comment3.target=void\ compute()
comment3.text=\ \n\ Put\ N(O(d),\ r,\ alpha\ and\ beta)\ into\ dictionary\ \n\ for\ given\ d\ \=\ 1,...,deg,\ r\ \=\ 0,...,maxNode\ and\ all\ valid\ (alpha,\ beta).\n\ If\ d\ >\=\ deg\ -\ printLast,\ write\ the\ result\ in\ the\ output\ file.\ \n
comment4.params=d\ r
comment4.target=void\ output(int,\ int)
comment5.params=d\ r\ alpha\ beta
comment5.target=java.math.BigInteger\ N(int,\ int,\ byte[],\ byte[])
comment5.text=\ \n\ The\ recursive\ formula\ is\ implemented\ here.\ \n
comment6.params=d\ r\ alpha\ beta\ k
comment6.target=java.math.BigInteger\ first(int,\ int,\ byte[],\ byte[],\ int)
comment7.params=d\ r\ alpha\ beta\ aP\ bP
comment7.target=java.math.BigInteger\ second(int,\ int,\ byte[],\ byte[],\ byte[],\ byte[])
numComments=8
