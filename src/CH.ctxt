#BlueJ class context
comment0.target=CH
comment0.text=\n\ <p>\n\ This\ CH\ class\ implements\ the\ recursive\ formula\ of\ Caporaso-Harris\ in\ \n\ the\ article\ "Counting\ plane\ curves\ of\ any\ genus".\ The\ formula\ computes\ \n\ the\ number\ of\ r-nodal\ curves\ on\ the\ projective\ plane\ satisfying\ given\ \ \n\ tangency\ conditions\ of\ any\ degree\ d\ and\ r.\ We\ will\ follow\ the\ notation\ in\ \ \n\ Section\ 1.1\ of\ the\ article\ as\ much\ as\ possible.\n\ <p>\n\ Users\ will\ be\ prompted\ to\ enter\ two\ integers\:\ the\ maximal\ degree\ and\ \n\ the\ maximal\ number\ of\ nodes\ for\ the\ curves\ in\ concern.\n\ The\ program\ will\ print\ two\ kinds\ of\ computation\ results\ to\ txt\ files\:\n\ numbers\ of\ nodal\ curves\ line\ by\ line\ and\ generating\ series.\ \n\ <p>\n\ The\ first\ kind\ of\ files\ contain\ the\ number\ of\ degree\ d\ curves\ on\ the\ \n\ projective\ plane\ with\ r\ nodes\ (strictly\ speaking,\ geometric\ genus\ \n\ (d-1)*(d-2)/2\ -\ r)\n\ which\ satisfy\ tangency\ conditions\ (alpha,\ beta)\ with\ a\ given\ line\ for\ \ \n\ <br>\n\ 1)\ d\ \=\ 1,\ 2,\ ...,maximal\ degree.\ \n\ To\ limit\ the\ range,\ modify\ the\ variable\ printLast\ to\ only\ print\ \ \n\ the\ top\ printLast\ different\ degrees.\ <br\ />\n\ 2)\ all\ nonnegative\ integers\ r\ less\ or\ equal\ to\ max\ number\ of\ nodes,\ <br>\ \ \ \n\ 3)\ all\ valid\ tangency\ conditions\ alpha\ and\ beta\ \n\ \ \ \ (valid\ \:\=\ satisfy\ I(alpha)+I(beta)\ \=\ d).\ \n\ <p>\n\ alpha\ \:\ tangency\ conditions\ at\ assigned\ points.\ \ <br>\n\ beta\ \:\ tangency\ conditions\ at\ unassigned\ points.\ \n\ beta\ \=\ (beta_1,\ beta_2,....).\n\ <p>\ \n\ These\ output\ numbers\ will\ be\ located\ at\ ../output/CH\ and\ be\ split\ \ \ \ \ \n\ according\ to\ the\ degree\ and\ number\ of\ nodes.\ \n\ <p>\n\ The\ second\ kind\ of\ files\ contain\ the\ generating\ series\ of\ those\ numbers.\ \n\ Define\ the\ generating\ series\ on\ the\ projective\ plane\ P^2\ and\ line\n\ bundle\ O(d)\ to\ be\ <br>\n\ T_{alpha}(P^2,\ O(d),\ line)\ \=\ \\sum_{r,\ beta}\ N(d,\ r,\ alpha,\ beta)\ z^r\ \n\ b^{beta_2}\ c^{beta_3}\ d^{beta_4}....<br>\n\ Define\ the\ weighted\ degree\ of\ a\ monomial\ to\ be\ <br>\n\ wdegree(z^r\ b^{beta_2}\ c^{beta_3}\ d^{beta_4}....)\ \=\ 2*b\ +\ 3*c\ +\ 4*d...<br>\n\ <p>\n\ The\ output\ will\ contain\ T_{alpha}\ for\ every\ I(alpha)\ <\=\ 4.\n\ In\ each\ T_{alpha},\ those\ terms\ with\ weighted\ degree\ less\ or\ equal\ to\ 10\ \ \n\ will\ be\ printed\ out.\ \n\ These\ generating\ series\ will\ be\ written\ in\ files\ at\ ../output/genCH.\ \n\ The\ z^r\ terms\ are\ omitted\ in\ the\ output\ files\ since\ it's\ the\ same\ for\ all\ \n\ series\ in\ the\ same\ file.\ Please\ multiply\ by\ z^r\ manually.\ \n\ <br>\n\ The\ number\ of\ terms\ in\ output\ can\ be\ modified\ but\ the\ highest\ tangency\ \n\ multiplicity\ must\ be\ less\ than\ 26.\ \ \n\ <p>\n\ \n\ Notes\ on\ algorithm\:\ <br>\n\ This\ class\ and\ HirTable\ use\ the\ same\ algorithm.\ \n\ <p>\n\ alpha\ and\ beta\ are\ stored\ by\ byte\ arrays.\ The\ length\ of\ them\ (and\ \n\ variations)\ are\ of\ fixed\ length\ d.\ The\ bound\ is\ from\ the\ max\ length\ of\ \n\ alpha,\ alpha',\ beta,\ beta'\ <\=\ d.\ \n\ All\ methods\ in\ arrayOp\ will\ check\ if\ the\ length\ of\ inputs\ equals\ d.\ \n\ \n\ @author\ Yu-jong\ Tzeng\n\ @version\ 4.0\n\ @since\ 1.0.\n
comment1.params=deg\ maxNode
comment1.target=CH(int,\ int)
comment1.text=\n\ The\ constructor\ of\ the\ class.\ Will\ do\ setups\ before\ actual\ computation.\n\ @param\ deg\ The\ maximal\ degree\ of\ the\ curves.\ \n\ @param\ maxNode\ The\ maximal\ number\ of\ nodes\ of\ the\ curves.\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\ \n\ This\ method\ prompt\ for\ user\ input,\ create\ objects\ then\ call\ compute().\n\ Parameters\ deg\ and\ maxNode\ are\ initialized\ by\ user\ input.\ \n\ @param\ args\ Unused\n
comment3.params=
comment3.target=void\ compute()
comment3.text=\ \n\ Compute\ all\ N(d,\ r,\ alpha\ and\ beta)\ in\ the\ specified\ range\ and\ \n\ generate\ output.\ \n
comment4.params=d\ r
comment4.target=void\ output(int,\ int)
comment4.text=\ Write\ to\ output\ files\ and\ put\ results\ in\ dictionary.\n\ @param\ d\ the\ working\ degree\n\ @param\ r\ the\ working\ number\ of\ nodes\n
comment5.params=d\ r\ alpha\ beta
comment5.target=java.math.BigInteger\ N(int,\ int,\ byte[],\ byte[])
comment5.text=\ \n\ The\ recursive\ formula\ is\ implemented\ here.\ \n
comment6.params=d\ r\ alpha\ beta\ k
comment6.target=java.math.BigInteger\ first(int,\ int,\ byte[],\ byte[],\ int)
comment6.text=\ \n\ Computes\ a\ single\ term\ in\ the\ first\ term\n
comment7.params=d\ r\ alpha\ beta\ aP\ bP
comment7.target=java.math.BigInteger\ second(int,\ int,\ byte[],\ byte[],\ byte[],\ byte[])
comment7.text=\ \n\ \ Computes\ a\ single\ term\ in\ the\ second\ term\n
numComments=8
