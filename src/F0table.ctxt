#BlueJ class context
comment0.target=F0table
comment0.text=\n\ <p>\n\ The\ F0table\ class\ uses\ dynamic\ programming\ approach\ to\ implement\ the\ \n\ recursive\ formula\ of\ Vakil\ in\ "Counting\ curves\ on\ rational\ surfaces".\ \n\ The\ formula\ computes\ the\ number\ of\ singular\ curves\ on\ P^1*P^1\ which\ \n\ satisfy\ given\ tangency\ conditions\ with\ a\ fixed\ line\ in\ |O(1,0)|.\ \n\ <p>\n\ Users\ will\ be\ prompted\ to\ enter\ three\ integers\:\ a,\ b\ and\ maxNode.\ \n\ <p>\n\ (a,b)\:\ the\ maximal\ bi-degrees\ of\ the\ curve\ class\ <br>\n\ maxNode\:\ \ max\ difference\ between\ the\ arithmetic\ genus\ and\ geometric\ \n\ genus\ of\ the\ curves\ in\ concern.\ \ \n\ <p>\n\ The\ program\ will\ print\ two\ kinds\ of\ computation\ results\ in\ txt\ files\:\n\ numbers\ of\ nodal\ curves\ line\ by\ line\ and\ generating\ series.\ \n\ <p>\n\ The\ first\ kind\ of\ files\ contain\ the\ number\ of\ genus\ g\ curves\ of\ \n\ bi-degreeson\ (i,\ b)\ on\ P^1*P^1\ which\ satisfy\ tangency\ conditions\ \n\ (alpha,\ beta)\ with\ a\ fixed\ line\ in\ |O(1,0)|\ for\ \ <br\ />\n\ 1)\ (i,b)\ for\ i\ \=\ (a\ -\ 5\ +\ 1),...,\ a\ (due\ to\ the\ recursive\ nature\ \n\ of\ Vakil's\ formula)\ (5\ is\ the\ default\ number\ and\ can\ be\ changed\ by\ \n\ modifying\ the\ instance\ variable\ printLast),\ \ <br\ />\n\ 2)\ all\ g\ between\ (arithmetic\ genus\ of\ O(i,b)\ -\ maxNode)\ and\ \n\ \ \ \ arithmetic\ genus\ of\ O(i,b),\ \ <br\ />\n\ 3)\ all\ valid\ tangency\ conditions\ alpha\ and\ beta\ \n\ \ \ \ (valid\ \:\=\ satisfy\ I(alpha)+I(beta)\ \=\ b).\ \n\ <p>\n\ alpha\ \:\ tangency\ conditions\ at\ assigned\ points.\ \ <br>\n\ beta\ \:\ tangency\ conditions\ at\ unassigned\ points.\ \n\ beta\ \=\ (beta_1,\ beta_2,....)\n\ <p>\ \n\ The\ output\ numbers\ will\ be\ located\ at\ output/F0\ and\ be\ split\ \n\ according\ to\ degree\ and\ the\ number\ of\ nodes.\ \n\ <p>\n\ The\ second\ kind\ of\ files\ contain\ the\ generating\ series\ of\ those\ numbers.\ \n\ See\ the\ documentation\ of\ CH.java\ for\ the\ definition\ and\ range\ of\ generating\n\ series.\ <p>\n\ Note\ on\ algorithm\:\ \ <br\ />\n\ alpha\ and\ beta\ are\ stored\ by\ byte\ arrays.\ The\ length\ of\ them\ (and\ \n\ variations)\ are\ of\ fixed\ length\ b.\ The\ bound\ is\ from\ the\ maxLength\ of\ \n\ alpha,\ alpha',\ beta,\ beta'\ <\=\ b.\ \n\ All\ methods\ in\ arrayOP\ will\ check\ if\ the\ length\ of\ inputs\ equals\ maxLength.\ \n\ <p>\n\ The\ output\ numbers\ will\ be\ located\ at\ ../output/F0\ <br>\n\ All\ terms\ in\ the\ generating\ series\ satisfying\ total\ degree\ <\=\ 5\ and\ \n\ weighted\ degree\ <\=\ 10\ will\ be\ written\ in\ files\ at\ output/genFunF0.\ <br>\n\ wdeg\ r\ \=\ 0,\ wdeg\ b\ \=\ 2,\ wdeg\ c\ \=\ 3,\ .....\n\ The\ range\ can\ be\ modified\ but\ the\ length\ of\ tangency\ conditions\ must\ <\=25.\ \n\ <p>\n\ @author\ Yu-jong\ Tzeng\n\ @version\ 2.1\n\ @since\ May\ 20,\ 2020.\n
comment1.params=a\ b\ maxNode
comment1.target=F0table(int,\ int,\ int)
comment1.text=\n\ The\ constructor\ of\ the\ class.\n\ @param\ a\ the\ number\ of\ ample\ class\ h\ in\ the\ curve\ class\ O(a,b)\n\ @param\ b\ the\ number\ of\ fiber\ class\ h\ in\ the\ curve\ class\ O(a,b)\n\ @param\ maxNode\ the\ maximal\ difference\ between\ arithmetic\ genus\ and\ \n\ geometric\ genus\ of\ the\ curves.\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\ \n\ This\ method\ prompt\ for\ user\ input,\ create\ objects\ then\ call\ compute().\ \n\ Parameters\ a,\ b,\ and\ maxNode\ are\ initialized\ by\ user\ input.\ \n\ @param\ args\ Unused\n
comment3.params=
comment3.target=void\ compute()
comment3.text=\ \n\ Put\ N(O(i\ ,b),\ r,\ alpha\ and\ beta)\ into\ dictionary\ \n\ for\ given\ i\ \=\ 0,...,a,\ \ r\ \=\ 0,...,maxNode\ and\ all\ valid\ (alpha,\ beta).\n\ If\ i\ >\=\ a\ -\ printLast,\ write\ the\ result\ in\ the\ output\ file.\ \ \n
comment4.params=i\ b\ g
comment4.target=void\ output(int,\ int,\ int)
comment4.text=\ Write\ to\ output\ files\ and\ put\ results\ in\ dictionary.\n\ @param\ d\ the\ working\ degree\n\ @param\ r\ the\ working\ number\ of\ nodes\n
comment5.params=aa\ g\ alpha\ beta
comment5.target=java.math.BigInteger\ N(int,\ int,\ byte[],\ byte[])
comment5.text=\ \n\ The\ recursive\ formula\ is\ implemented\ here.\ \n
comment6.params=i\ g\ alpha\ beta\ k
comment6.target=java.math.BigInteger\ first(int,\ int,\ byte[],\ byte[],\ int)
comment6.text=\ \n\ Computes\ a\ single\ term\ in\ the\ first\ term\n
comment7.params=aa\ g\ alpha\ beta\ aP\ bP
comment7.target=java.math.BigInteger\ second(int,\ int,\ byte[],\ byte[],\ byte[],\ byte[])
comment7.text=\ \n\ \ Computes\ a\ single\ term\ in\ the\ second\ term\n
numComments=8
